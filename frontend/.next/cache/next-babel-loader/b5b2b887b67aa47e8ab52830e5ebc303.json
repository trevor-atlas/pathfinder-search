{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx\";\n\nvar __jsx = React.createElement;\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup, TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport React, { useState, useEffect } from 'react';\nimport { useDebounce } from '../utils/debounce';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      '& > *': {\n        // @ts-ignore\n        margin: '1em',\n        width: '25ch'\n      }\n    }\n  };\n});\n\nvar Index = function Index() {\n  var classes = useStyles();\n\n  var _useState = useState('spells'),\n      type = _useState[0],\n      setType = _useState[1];\n\n  var _useState2 = useState(''),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var _useState4 = useState([]),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var debouncedSearchTerm = useDebounce(query, 500);\n\n  var handleTypeChange = function handleTypeChange(event) {\n    setType(event.target.value);\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!debouncedSearchTerm) {\n                _context.next = 13;\n                break;\n              }\n\n              setIsLoading(true);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080?query=\".concat(query, \"&type=\").concat(type)));\n\n            case 4:\n              result = _context.sent;\n              _context.t0 = setData;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(result.json());\n\n            case 8:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              setIsLoading(false);\n              _context.next = 14;\n              break;\n\n            case 13:\n              setData([{\n                name: 'no results'\n              }]);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [debouncedSearchTerm, type]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(TextField, {\n    id: \"outlined-basic\",\n    label: \"Outlined\",\n    variant: \"outlined\",\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  })), __jsx(FormControl, {\n    component: \"fieldset\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, __jsx(FormLabel, {\n    component: \"legend\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"Gender\"), __jsx(RadioGroup, {\n    \"aria-label\": \"gender\",\n    name: \"gender1\",\n    value: type,\n    onChange: handleTypeChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, __jsx(FormControlLabel, {\n    value: \"feats\",\n    control: __jsx(Radio, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 62\n      }\n    }),\n    label: \"Female\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"monsters\",\n    control: __jsx(Radio, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 65\n      }\n    }),\n    label: \"Male\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"spells\",\n    control: __jsx(Radio, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 63\n      }\n    }),\n    label: \"Other\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }), __jsx(FormControlLabel, {\n    value: \"items\",\n    disabled: true,\n    control: __jsx(Radio, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 71\n      }\n    }),\n    label: \"(Disabled option)\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, \"Loading ...\") : __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, data.map(function (datum) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }, datum.name);\n  }))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx"],"names":["FormControl","FormControlLabel","FormLabel","Radio","RadioGroup","TextField","makeStyles","React","useState","useEffect","useDebounce","useStyles","theme","root","margin","width","Index","classes","type","setType","query","setQuery","isLoading","setIsLoading","data","setData","debouncedSearchTerm","handleTypeChange","event","target","value","fetch","result","json","name","e","map","datum"],"mappings":"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","sourcesContent":["import {\n    FormControl,\n    FormControlLabel,\n    FormLabel,\n    Radio,\n    RadioGroup,\n    TextField\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport React, { useState, useEffect } from 'react';\nimport { useDebounce } from '../utils/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            // @ts-ignore\n            margin: '1em',\n            width: '25ch',\n        },\n    },\n}));\n\nconst Index = () => {\n    const classes = useStyles();\n    const [type, setType] = useState('spells');\n    const [query, setQuery] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState([]);\n\n    const debouncedSearchTerm = useDebounce(query, 500);\n\n    const handleTypeChange = (event) => {\n        setType(event.target.value);\n    };\n\n    useEffect(() => {\n        (async () => {\n            if (debouncedSearchTerm) {\n                setIsLoading(true);\n                const result = await fetch(`http://localhost:8080?query=${query}&type=${type}`);\n                setData(await result.json());\n                setIsLoading(false);\n            } else {\n                setData([{name: 'no results'}])\n            }\n        })()\n    }, [debouncedSearchTerm, type]);\n\n    return (\n        <div>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Outlined\"\n                    variant=\"outlined\"\n                    onChange={(e) => setQuery(e.target.value)}\n                />\n            </form>\n            <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">Gender</FormLabel>\n                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={type} onChange={handleTypeChange}>\n                    <FormControlLabel value=\"feats\" control={<Radio />} label=\"Female\" />\n                    <FormControlLabel value=\"monsters\" control={<Radio />} label=\"Male\" />\n                    <FormControlLabel value=\"spells\" control={<Radio />} label=\"Other\" />\n                    <FormControlLabel value=\"items\" disabled control={<Radio />} label=\"(Disabled option)\" />\n                </RadioGroup>\n            </FormControl>\n            <div>\n                {isLoading ? (\n                    <div>Loading ...</div>\n                ) : (\n                    <ul>\n                        {\n                        data.map((datum) => {\n                            return (\n                                <li>{datum.name}</li>\n                            )\n                        })\n                        }\n                    </ul>\n                )}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}