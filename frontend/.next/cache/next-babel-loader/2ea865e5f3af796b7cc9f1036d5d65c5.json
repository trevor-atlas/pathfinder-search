{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useDebounce } from '../utils/debounce';\n\nvar Index = function Index() {\n  var _useState = useState('spells'),\n      type = _useState[0],\n      setType = _useState[1];\n\n  var _useState2 = useState(''),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var _useState4 = useState([]),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var debouncedSearchTerm = useDebounce(query, 500);\n  useEffect(function () {\n    (function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!debouncedSearchTerm) {\n                _context.next = 9;\n                break;\n              }\n\n              setIsLoading(true);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080?query=\".concat(query, \"&type=\").concat(type), {\n                method: 'GET',\n                // *GET, POST, PUT, DELETE, etc.\n                cache: 'no-cache',\n                // *default, no-cache, reload, force-cache, only-if-cached\n                headers: {\n                  'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n                },\n                referrerPolicy: 'no-referrer' // no-referrer, *client\n\n              }));\n\n            case 4:\n              result = _context.sent;\n              setData(result.json());\n              setIsLoading(false);\n              _context.next = 10;\n              break;\n\n            case 9:\n              setData([{\n                name: 'no results'\n              }]);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [debouncedSearchTerm, type]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('spells');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, \"spells\"), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('feats');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, \"feats\"), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('monsters');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, \"monsters\"), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('items');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"items\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"Loading ...\") : __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, data.map(function (datum) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 33\n      }\n    }, datum.name);\n  }))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx"],"names":["React","useState","useEffect","useDebounce","Index","type","setType","query","setQuery","isLoading","setIsLoading","data","setData","debouncedSearchTerm","fetch","method","cache","headers","referrerPolicy","result","json","name","e","target","value","map","datum"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDebounce } from '../utils/debounce';\n\nconst Index = () => {\n    const [type, setType] = useState('spells');\n    const [query, setQuery] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState([]);\n\n    const debouncedSearchTerm = useDebounce(query, 500);\n\n    useEffect(() => {\n        (async () => {\n            if (debouncedSearchTerm) {\n                setIsLoading(true);\n                const result = await fetch(\n                    `http://localhost:8080?query=${query}&type=${type}`,\n\n                {\n                    method: 'GET', // *GET, POST, PUT, DELETE, etc.\n                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                    headers: {\n                    'Content-Type': 'application/json'\n                    // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                    referrerPolicy: 'no-referrer', // no-referrer, *client\n                }\n                );\n                setData(result.json());\n                setIsLoading(false);\n            } else {\n                setData([{name: 'no results'}])\n            }\n        })()\n    }, [debouncedSearchTerm, type]);\n    return (\n        <div>\n            <input type=\"text\" onChange={(e) => setQuery(e.target.value)}/>\n            <span onClick={() => setType('spells')}>spells</span>\n            <span onClick={() => setType('feats')}>feats</span>\n            <span onClick={() => setType('monsters')}>monsters</span>\n            <span onClick={() => setType('items')}>items</span>\n            <div>\n                {isLoading ? (\n                    <div>Loading ...</div>\n                ) : (\n                    <ul>\n                        {\n                        data.map((datum) => {\n                            return (\n                                <li>{datum.name}</li>\n                            )\n                        })\n                        }\n                    </ul>\n                )}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}