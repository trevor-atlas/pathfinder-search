{"ast":null,"code":"var _jsxFileName = \"/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport React, { useState, useEffect } from 'react';\nimport { useDebounce } from '../utils/debounce';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      // @ts-ignore\n      margin: '1em',\n      width: '25ch'\n    }\n  }\n}));\n\nconst Index = () => {\n  const classes = useStyles();\n  const {\n    0: type,\n    1: setType\n  } = useState('spells');\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const debouncedSearchTerm = useDebounce(query, 500);\n  useEffect(() => {\n    (async () => {\n      if (debouncedSearchTerm) {\n        setIsLoading(true);\n        const result = await fetch(`http://localhost:8080?query=${query}&type=${type}`);\n        setData((await result.json()));\n        setIsLoading(false);\n      } else {\n        setData([{\n          name: 'no results'\n        }]);\n      }\n    })();\n  }, [debouncedSearchTerm, type]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, __jsx(TextField, {\n    id: \"outlined-basic\",\n    label: \"Outlined\",\n    variant: \"outlined\",\n    onChange: e => setQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  })), __jsx(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), __jsx(\"ul\", {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(\"li\", {\n    style: {\n      color: type == 'spells' ? 'blue' : '#333'\n    },\n    onClick: () => setType('spells'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, \"spells\"), __jsx(\"li\", {\n    onClick: () => setType('feats'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"feats\"), __jsx(\"li\", {\n    onClick: () => setType('monsters'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"monsli\"), __jsx(\"li\", {\n    onClick: () => setType('items'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, \"items\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"Loading ...\") : __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, data.map(datum => {\n    return __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 33\n      }\n    }, datum.name);\n  }))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx"],"names":["TextField","makeStyles","React","useState","useEffect","useDebounce","useStyles","theme","root","margin","width","Index","classes","type","setType","query","setQuery","isLoading","setIsLoading","data","setData","debouncedSearchTerm","result","fetch","json","name","e","target","value","color","map","datum"],"mappings":"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","sourcesContent":["import { TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport React, { useState, useEffect } from 'react';\nimport { useDebounce } from '../utils/debounce';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            // @ts-ignore\n            margin: '1em',\n            width: '25ch',\n        },\n    },\n}));\n\nconst Index = () => {\n    const classes = useStyles();\n    const [type, setType] = useState('spells');\n    const [query, setQuery] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState([]);\n\n    const debouncedSearchTerm = useDebounce(query, 500);\n\n    useEffect(() => {\n        (async () => {\n            if (debouncedSearchTerm) {\n                setIsLoading(true);\n                const result = await fetch(`http://localhost:8080?query=${query}&type=${type}`);\n                setData(await result.json());\n                setIsLoading(false);\n            } else {\n                setData([{name: 'no results'}])\n            }\n        })()\n    }, [debouncedSearchTerm, type]);\n    return (\n        <div>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField\n                    id=\"outlined-basic\"\n                    label=\"Outlined\"\n                    variant=\"outlined\"\n                    onChange={(e) => setQuery(e.target.value)}\n                />\n            </form>\n            <input type=\"text\" />\n            <ul style={{}}>\n                <li style={{color: type == 'spells' ? 'blue' : '#333'}} onClick={() => setType('spells')}>spells</li>\n                <li onClick={() => setType('feats')}>feats</li>\n                <li onClick={() => setType('monsters')}>monsli</li>\n                <li onClick={() => setType('items')}>items</li>\n            </ul>\n            <div>\n                {isLoading ? (\n                    <div>Loading ...</div>\n                ) : (\n                    <ul>\n                        {\n                        data.map((datum) => {\n                            return (\n                                <li>{datum.name}</li>\n                            )\n                        })\n                        }\n                    </ul>\n                )}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}