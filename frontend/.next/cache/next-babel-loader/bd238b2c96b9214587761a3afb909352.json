{"ast":null,"code":"import { useState, useEffect } from 'react'; // Our hook\n\nexport function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const {\n    0: debouncedValue,\n    1: setDebouncedValue\n  } = useState(value);\n  useEffect(() => {\n    // Set debouncedValue to value (passed in) after the specified delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay); // Return a cleanup function that will be called every time ...\n    // ... useEffect is re-called. useEffect will only be re-called ...\n    // ... if value changes (see the inputs array below).\n    // This is how we prevent debouncedValue from changing if value is ...\n    // ... changed within the delay period. Timeout gets cleared and restarted.\n    // To put it in context, if the user is typing within our app's ...\n    // ... search box, we don't want the debouncedValue to update until ...\n    // ... they've stopped typing for more than 500ms.\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, // Only re-call effect if value changes\n  // You could also add the \"delay\" var to inputs array if you ...\n  // ... need to be able to change that dynamically.\n  [value]);\n  return debouncedValue;\n}","map":{"version":3,"sources":["/Users/trevoratlas/projects/pathfinder-search/frontend/utils/debounce.ts"],"names":["useState","useEffect","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"AAAA,SAAgBA,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACtC;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCN,QAAQ,CAACG,KAAD,CAApD;AAEAF,EAAAA,SAAS,CACL,MAAM;AACF;AACA,UAAMM,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACH,KAFyB,EAEvBC,KAFuB,CAA1B,CAFE,CAMF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO,MAAM;AACTK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,KAFD;AAGH,GAlBI,EAmBL;AACA;AACA;AACA,GAACJ,KAAD,CAtBK,CAAT;AAyBA,SAAOE,cAAP;AACH","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Our hook\nexport function useDebounce(value, delay) {\n    // State and setters for debounced value\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Set debouncedValue to value (passed in) after the specified delay\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Return a cleanup function that will be called every time ...\n            // ... useEffect is re-called. useEffect will only be re-called ...\n            // ... if value changes (see the inputs array below).\n            // This is how we prevent debouncedValue from changing if value is ...\n            // ... changed within the delay period. Timeout gets cleared and restarted.\n            // To put it in context, if the user is typing within our app's ...\n            // ... search box, we don't want the debouncedValue to update until ...\n            // ... they've stopped typing for more than 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Only re-call effect if value changes\n        // You could also add the \"delay\" var to inputs array if you ...\n        // ... need to be able to change that dynamically.\n        [value]\n    );\n\n    return debouncedValue;\n}\n\n"]},"metadata":{},"sourceType":"module"}