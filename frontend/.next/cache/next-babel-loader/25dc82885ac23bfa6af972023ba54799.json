{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\n\nvar Index = function Index() {\n  var _useState = useState('spells'),\n      type = _useState[0],\n      setType = _useState[1];\n\n  var _useState2 = useState(''),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var _useState3 = useState(false),\n      isLoading = _useState3[0],\n      setIsLoading = _useState3[1];\n\n  var _useState4 = useState([]),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function _callee() {\n    var result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"http:localhost?query=\".concat(query, \"&type=\").concat(type)));\n\n          case 3:\n            result = _context.sent;\n            _context.t0 = setData;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(result.json());\n\n          case 7:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n            setIsLoading(false);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [query, type]);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('spells');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, \"spells\"), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('feats');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, \"feats\"), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('monsters');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, \"monsters\"), __jsx(\"span\", {\n    onClick: function onClick() {\n      return setType('items');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \"items\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, isLoading ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }, \"Loading ...\") : __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 21\n    }\n  }, data.map(function (datum) {\n    return __jsx(\"li\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 33\n      }\n    }, datum.name);\n  }))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/trevoratlas/projects/pathfinder-search/frontend/pages/index.tsx"],"names":["React","useState","useEffect","Index","type","setType","query","setQuery","isLoading","setIsLoading","data","setData","fetch","result","json","e","target","value","map","datum","name"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA,kBACQF,QAAQ,CAAC,QAAD,CADhB;AAAA,MACTG,IADS;AAAA,MACHC,OADG;;AAAA,mBAEUJ,QAAQ,CAAC,EAAD,CAFlB;AAAA,MAETK,KAFS;AAAA,MAEFC,QAFE;;AAAA,mBAGkBN,QAAQ,CAAC,KAAD,CAH1B;AAAA,MAGTO,SAHS;AAAA,MAGEC,YAHF;;AAAA,mBAIQR,QAAQ,CAAC,EAAD,CAJhB;AAAA,MAITS,IAJS;AAAA,MAIHC,OAJG;;AAMhBT,EAAAA,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACNO,YAAAA,YAAY,CAAC,IAAD,CAAZ;AADM;AAAA,6CAEeG,KAAK,gCACEN,KADF,mBACgBF,IADhB,EAFpB;;AAAA;AAEAS,YAAAA,MAFA;AAAA,0BAKNF,OALM;AAAA;AAAA,6CAKQE,MAAM,CAACC,IAAP,EALR;;AAAA;AAAA;AAAA;AAMNL,YAAAA,YAAY,CAAC,KAAD,CAAZ;;AANM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAON,CAACH,KAAD,EAAQF,IAAR,CAPM,CAAT;AAQA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,EAAE,kBAACW,CAAD;AAAA,aAAOR,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AAAA,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAM,IAAA,OAAO,EAAE;AAAA,aAAMZ,OAAO,CAAC,QAAD,CAAb;AAAA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGI;AAAM,IAAA,OAAO,EAAE;AAAA,aAAMA,OAAO,CAAC,OAAD,CAAb;AAAA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHJ,EAII;AAAM,IAAA,OAAO,EAAE;AAAA,aAAMA,OAAO,CAAC,UAAD,CAAb;AAAA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAKI;AAAM,IAAA,OAAO,EAAE;AAAA,aAAMA,OAAO,CAAC,OAAD,CAAb;AAAA,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,SAAS,GACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADM,GAGN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIE,IAAI,CAACQ,GAAL,CAAS,UAACC,KAAD,EAAW;AAChB,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAK,CAACC,IAAX,CADJ;AAGH,GAJD,CAFJ,CAJR,CANJ,CADJ;AAyBH,CAvCD;;AAyCA,eAAejB,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Index = () => {\n    const [type, setType] = useState('spells');\n    const [query, setQuery] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState([]);\n\n    useEffect(async () => {\n        setIsLoading(true);\n        const result = await fetch(\n            `http:localhost?query=${query}&type=${type}`,\n        );\n        setData(await result.json());\n        setIsLoading(false);\n    }, [query, type]);\n    return (\n        <div>\n            <input type=\"text\" onChange={(e) => setQuery(e.target.value)}/>\n            <span onClick={() => setType('spells')}>spells</span>\n            <span onClick={() => setType('feats')}>feats</span>\n            <span onClick={() => setType('monsters')}>monsters</span>\n            <span onClick={() => setType('items')}>items</span>\n            <div>\n                {isLoading ? (\n                    <div>Loading ...</div>\n                ) : (\n                    <ul>\n                        {\n                        data.map((datum) => {\n                            return (\n                                <li>{datum.name}</li>\n                            )\n                        })\n                        }\n                    </ul>\n                )}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}