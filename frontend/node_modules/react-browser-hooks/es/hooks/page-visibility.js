import { useEffect, useState } from 'react';
import { IS_SERVER } from '../constants';

/**
 * Function to grab the visibility prop strings
 * from the current browser
 *
 * @returns {object} - object containing both hidden
 *  and visibilityChange properties
 */
var getVisibilityProps = function getVisibilityProps() {
  if (IS_SERVER) {
    return {};
  }

  var hidden = void 0;
  var visibilityChange = void 0;

  if (typeof document.hidden !== 'undefined') {
    // Opera 12.10 and Firefox 18 and later support
    hidden = 'hidden';
    visibilityChange = 'visibilitychange';
  } else if (typeof document.msHidden !== 'undefined') {
    hidden = 'msHidden';
    visibilityChange = 'msvisibilitychange';
  } else if (typeof document.webkitHidden !== 'undefined') {
    hidden = 'webkitHidden';
    visibilityChange = 'webkitvisibilitychange';
  }

  return { hidden: hidden, visibilityChange: visibilityChange };
};

/**
 * Page Visibility API Hook
 * Hooks into page visibility API
 * @returns {boolean} - whether page is currently visible
 */
export var usePageVisibility = function usePageVisibility() {
  var _getVisibilityProps = getVisibilityProps(),
      hidden = _getVisibilityProps.hidden,
      visibilityChange = _getVisibilityProps.visibilityChange;

  var _useState = useState(IS_SERVER || !document[hidden]),
      visible = _useState[0],
      setVisible = _useState[1];

  useEffect(function () {
    var handler = function handler() {
      return setVisible(!document[hidden]);
    };

    document.addEventListener(visibilityChange, handler);
    return function () {
      document.removeEventListener(visibilityChange, handler);
    };
  }, [hidden, visibilityChange]);

  return visible;
};