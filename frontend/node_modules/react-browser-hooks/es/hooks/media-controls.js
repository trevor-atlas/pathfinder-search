import { useState, useEffect } from 'react';

export function useMediaControls(element) {
  var _useState = useState(null),
      currentTime = _useState[0],
      setCurrentTime = _useState[1];

  var _useState2 = useState(null),
      muted = _useState2[0],
      setMuted = _useState2[1];

  var _useState3 = useState(null),
      paused = _useState3[0],
      setPaused = _useState3[1];

  var _useState4 = useState(null),
      volume = _useState4[0],
      adjustVolume = _useState4[1];

  var _useState5 = useState(null),
      cachedVolume = _useState5[0],
      setCachedVolume = _useState5[1];

  function pause() {
    element.current.pause();
  }

  function play() {
    return element.current.play();
  }

  function setVolume(value) {
    var volume = void 0;

    if (value < 0) {
      volume = 0;
    } else if (value > 1) {
      volume = 1;
    } else {
      volume = value;
    }

    if (volume === 0) {
      setCachedVolume(element.current.volume);
      mute();
    } else {
      unmute();
    }

    element.current.volume = volume;
  }

  function mute() {
    element.current.muted = true;
  }

  function unmute() {
    element.current.muted = false;
    if (cachedVolume) {
      element.current.volume = cachedVolume;
      setCachedVolume(null);
    }
  }

  function seek(value) {
    element.current.currentTime = value;
  }

  function stop() {
    pause();
    seek(0);
  }

  function restart() {
    seek(0);
    return play();
  }

  useEffect(function () {
    var currEl = element.current;
    var isPaused = function isPaused() {
      return currEl.paused || currEl.ended;
    };

    setCurrentTime(currEl.currentTime);
    setPaused(isPaused());
    adjustVolume(currEl.volume);
    setMuted(currEl.muted);

    var playPauseHandler = function playPauseHandler() {
      return setPaused(isPaused());
    };
    currEl.addEventListener('play', playPauseHandler); // fired by play method or autoplay attribute
    currEl.addEventListener('playing', playPauseHandler); // fired by resume after being paused due to lack of data
    currEl.addEventListener('pause', playPauseHandler); // fired by pause method
    currEl.addEventListener('waiting', playPauseHandler); // fired by pause due to lack of data

    var volumeHandler = function volumeHandler() {
      setMuted(currEl.muted);
      adjustVolume(currEl.volume);
    };
    currEl.addEventListener('volumechange', volumeHandler); // fired by a change of volume

    var seekHandler = function seekHandler() {
      return setCurrentTime(currEl.currentTime);
    };
    currEl.addEventListener('seeked', seekHandler); // fired on seek completed
    currEl.addEventListener('timeupdate', seekHandler); // fired on currentTime update

    return function () {
      currEl.removeEventListener('play', playPauseHandler);
      currEl.removeEventListener('playing', playPauseHandler);
      currEl.removeEventListener('pause', playPauseHandler);
      currEl.removeEventListener('waiting', playPauseHandler);

      currEl.removeEventListener('volumechange', volumeHandler);

      currEl.removeEventListener('seeked', seekHandler);
      currEl.removeEventListener('timeupdate', seekHandler);
    };
  }, [element, muted]);

  return {
    currentTime: currentTime,
    mute: mute,
    muted: muted,
    unmute: unmute,
    pause: pause,
    paused: paused,
    play: play,
    restart: restart,
    seek: seek,
    setVolume: setVolume,
    stop: stop,
    volume: volume
  };
}