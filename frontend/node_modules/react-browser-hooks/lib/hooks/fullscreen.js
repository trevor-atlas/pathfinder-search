'use strict';

exports.__esModule = true;
exports.isFullScreenElement = isFullScreenElement;
exports.useFullScreen = useFullScreen;
exports.getSizeInfo = getSizeInfo;
exports.isFullScreenSize = isFullScreenSize;
exports.useFullScreenBrowser = useFullScreenBrowser;

var _react = require('react');

var _constants = require('../constants');

var _resize = require('./resize');

// determine if we are in fullscreen mode and why
// don't set any state in here as called on init too
function isFullScreenElement(el) {
  if (el && el.current) {
    return Boolean(document.fullscreenElement === el.current || document.mozFullScreenElement === el.current || document.webkitFullscreenElement === el.current || document.msFullscreenElement === el.current);
  }

  return Boolean(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement || document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.fullScreenMode);
}

function useFullScreen() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var fsEl = options && options.element;
  var initialState = _constants.IS_SERVER ? false : isFullScreenElement(fsEl);

  var _useState = (0, _react.useState)(initialState),
      fullScreen = _useState[0],
      setFullScreen = _useState[1];

  // access various open fullscreen methods


  function openFullScreen() {
    var el = fsEl && fsEl.current || document.documentElement;

    if (el.requestFullscreen) return el.requestFullscreen();
    if (el.mozRequestFullScreen) return el.mozRequestFullScreen();
    if (el.webkitRequestFullscreen) return el.webkitRequestFullscreen();
    if (el.msRequestFullscreen) return el.msRequestFullscreen();
  }

  // access various exit fullscreen methods
  function closeFullScreen() {
    if (document.exitFullscreen) return document.exitFullscreen();
    if (document.mozCancelFullScreen) return document.mozCancelFullScreen();
    if (document.webkitExitFullscreen) return document.webkitExitFullscreen();
    if (document.msExitFullscreen) return document.msExitFullscreen();
  }

  (0, _react.useEffect)(function () {
    function handleChange() {
      setFullScreen(isFullScreenElement(fsEl));
    }

    document.addEventListener('webkitfullscreenchange', handleChange, false);
    document.addEventListener('mozfullscreenchange', handleChange, false);
    document.addEventListener('msfullscreenchange', handleChange, false);
    document.addEventListener('MSFullscreenChange', handleChange, false); // IE11
    document.addEventListener('fullscreenchange', handleChange, false);

    return function () {
      document.removeEventListener('webkitfullscreenchange', handleChange);
      document.removeEventListener('mozfullscreenchange', handleChange);
      document.removeEventListener('msfullscreenchange', handleChange);
      document.removeEventListener('MSFullscreenChange', handleChange);
      document.removeEventListener('fullscreenchange', handleChange);
    };
  }, [options.element, fsEl]);

  return {
    fullScreen: fullScreen,
    open: openFullScreen,
    close: closeFullScreen,
    toggle: fullScreen ? closeFullScreen : openFullScreen
  };
}

function getSizeInfo() {
  if (_constants.IS_SERVER) return {};
  return {
    screenTop: window.screenTop,
    screenY: window.screenY,
    screenWidth: window.screen.width,
    screenHeight: window.screen.height,
    innerWidth: window.innerWidth,
    innerHeight: window.innerHeight
  };
}

function isFullScreenSize(sizeInfo) {
  if (sizeInfo.screenWidth === sizeInfo.innerWidth && sizeInfo.screenHeight === sizeInfo.innerHeight) {
    return true;
  } else if (!sizeInfo.screenTop && !sizeInfo.screenY) {
    return true;
  }

  return false;
}

function useFullScreenBrowser() {
  var size = (0, _resize.useResize)();
  var initialSizeInfo = getSizeInfo();

  var _useState2 = (0, _react.useState)(_constants.IS_SERVER ? false : isFullScreenSize(initialSizeInfo)),
      fullScreen = _useState2[0],
      setFullScreen = _useState2[1];

  var _useState3 = (0, _react.useState)(initialSizeInfo),
      sizeInfo = _useState3[0],
      setSizeInfo = _useState3[1];

  (0, _react.useEffect)(function () {
    var sizeInfo = getSizeInfo();
    setFullScreen(isFullScreenSize(sizeInfo));
    setSizeInfo(sizeInfo);
  }, [size.width, size.height]);

  return {
    fullScreen: fullScreen,
    info: sizeInfo
  };
}