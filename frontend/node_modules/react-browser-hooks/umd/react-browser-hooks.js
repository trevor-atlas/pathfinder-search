/*!
 * react-browser-hooks v2.2.4 - https://github.com/nearform/react-browser-hooks
 * Apache-2.0 Licensed
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["ReactBrowserHooks"] = factory(require("react"));
	else
		root["ReactBrowserHooks"] = factory(root["React"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__0__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var src_namespaceObject = {};
__webpack_require__.r(src_namespaceObject);
__webpack_require__.d(src_namespaceObject, "useClickOutside", function() { return useClickOutside; });
__webpack_require__.d(src_namespaceObject, "isFullScreenElement", function() { return isFullScreenElement; });
__webpack_require__.d(src_namespaceObject, "useFullScreen", function() { return useFullScreen; });
__webpack_require__.d(src_namespaceObject, "getSizeInfo", function() { return getSizeInfo; });
__webpack_require__.d(src_namespaceObject, "isFullScreenSize", function() { return isFullScreenSize; });
__webpack_require__.d(src_namespaceObject, "useFullScreenBrowser", function() { return useFullScreenBrowser; });
__webpack_require__.d(src_namespaceObject, "useGeolocation", function() { return useGeolocation; });
__webpack_require__.d(src_namespaceObject, "useMousePosition", function() { return useMousePosition; });
__webpack_require__.d(src_namespaceObject, "useMediaControls", function() { return useMediaControls; });
__webpack_require__.d(src_namespaceObject, "useOrientation", function() { return useOrientation; });
__webpack_require__.d(src_namespaceObject, "useResize", function() { return useResize; });
__webpack_require__.d(src_namespaceObject, "useScroll", function() { return useScroll; });
__webpack_require__.d(src_namespaceObject, "useOnline", function() { return useOnline; });
__webpack_require__.d(src_namespaceObject, "usePageVisibility", function() { return page_visibility_usePageVisibility; });

// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__(0);

// CONCATENATED MODULE: ./src/hooks/click-outside.js


function useClickOutside(el) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var onClick = arguments[2];

  var els = [].concat(el);
  var active = true;

  if (!onClick && typeof options === 'function') {
    onClick = options;
  } else {
    active = options.active;
  }

  var handler = function handler(ev) {
    var target = ev.target;

    if (els.every(function (ref) {
      return !ref.current || !ref.current.contains(target);
    })) {
      onClick(ev);
    }
  };

  var cleanup = function cleanup() {
    return window.removeEventListener('click', handler);
  };

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    if (active) {
      window.addEventListener('click', handler);
    } else {
      cleanup();
    }

    return cleanup;
  });
}
// CONCATENATED MODULE: ./src/constants.js
var IS_SERVER = !(typeof window !== 'undefined' && window.document && window.document.createElement);
// CONCATENATED MODULE: ./src/hooks/resize.js



var defaultState = {
  height: null,
  width: null
};

function useResize() {
  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(IS_SERVER ? defaultState : getWindowSize()),
      size = _useState[0],
      setSize = _useState[1];

  function getWindowSize() {
    return {
      height: window.innerHeight,
      width: window.innerWidth
    };
  }

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    function handleResize() {
      setSize(getWindowSize());
    }

    window.addEventListener('resize', handleResize, false);
    return function () {
      return window.removeEventListener('resize', handleResize);
    };
  }, [setSize]);

  return size;
}
// CONCATENATED MODULE: ./src/hooks/fullscreen.js




// determine if we are in fullscreen mode and why
// don't set any state in here as called on init too
function isFullScreenElement(el) {
  if (el && el.current) {
    return Boolean(document.fullscreenElement === el.current || document.mozFullScreenElement === el.current || document.webkitFullscreenElement === el.current || document.msFullscreenElement === el.current);
  }

  return Boolean(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement || document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.fullScreenMode);
}

function useFullScreen() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var fsEl = options && options.element;
  var initialState = IS_SERVER ? false : isFullScreenElement(fsEl);

  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(initialState),
      fullScreen = _useState[0],
      setFullScreen = _useState[1];

  // access various open fullscreen methods


  function openFullScreen() {
    var el = fsEl && fsEl.current || document.documentElement;

    if (el.requestFullscreen) return el.requestFullscreen();
    if (el.mozRequestFullScreen) return el.mozRequestFullScreen();
    if (el.webkitRequestFullscreen) return el.webkitRequestFullscreen();
    if (el.msRequestFullscreen) return el.msRequestFullscreen();
  }

  // access various exit fullscreen methods
  function closeFullScreen() {
    if (document.exitFullscreen) return document.exitFullscreen();
    if (document.mozCancelFullScreen) return document.mozCancelFullScreen();
    if (document.webkitExitFullscreen) return document.webkitExitFullscreen();
    if (document.msExitFullscreen) return document.msExitFullscreen();
  }

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    function handleChange() {
      setFullScreen(isFullScreenElement(fsEl));
    }

    document.addEventListener('webkitfullscreenchange', handleChange, false);
    document.addEventListener('mozfullscreenchange', handleChange, false);
    document.addEventListener('msfullscreenchange', handleChange, false);
    document.addEventListener('MSFullscreenChange', handleChange, false); // IE11
    document.addEventListener('fullscreenchange', handleChange, false);

    return function () {
      document.removeEventListener('webkitfullscreenchange', handleChange);
      document.removeEventListener('mozfullscreenchange', handleChange);
      document.removeEventListener('msfullscreenchange', handleChange);
      document.removeEventListener('MSFullscreenChange', handleChange);
      document.removeEventListener('fullscreenchange', handleChange);
    };
  }, [options.element, fsEl]);

  return {
    fullScreen: fullScreen,
    open: openFullScreen,
    close: closeFullScreen,
    toggle: fullScreen ? closeFullScreen : openFullScreen
  };
}

function getSizeInfo() {
  if (IS_SERVER) return {};
  return {
    screenTop: window.screenTop,
    screenY: window.screenY,
    screenWidth: window.screen.width,
    screenHeight: window.screen.height,
    innerWidth: window.innerWidth,
    innerHeight: window.innerHeight
  };
}

function isFullScreenSize(sizeInfo) {
  if (sizeInfo.screenWidth === sizeInfo.innerWidth && sizeInfo.screenHeight === sizeInfo.innerHeight) {
    return true;
  } else if (!sizeInfo.screenTop && !sizeInfo.screenY) {
    return true;
  }

  return false;
}

function useFullScreenBrowser() {
  var size = useResize();
  var initialSizeInfo = getSizeInfo();

  var _useState2 = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(IS_SERVER ? false : isFullScreenSize(initialSizeInfo)),
      fullScreen = _useState2[0],
      setFullScreen = _useState2[1];

  var _useState3 = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(initialSizeInfo),
      sizeInfo = _useState3[0],
      setSizeInfo = _useState3[1];

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    var sizeInfo = getSizeInfo();
    setFullScreen(isFullScreenSize(sizeInfo));
    setSizeInfo(sizeInfo);
  }, [size.width, size.height]);

  return {
    fullScreen: fullScreen,
    info: sizeInfo
  };
}
// CONCATENATED MODULE: ./src/hooks/geolocation.js


function useGeolocation(options) {
  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])({
    timestamp: Date.now(),
    coords: {}
  }),
      position = _useState[0],
      setPosition = _useState[1];

  var _useState2 = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(null),
      error = _useState2[0],
      setError = _useState2[1];

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    navigator.geolocation.getCurrentPosition(setPosition, setError, options);
    var watchId = navigator.geolocation.watchPosition(setPosition, setError, options);
    return function () {
      return navigator.geolocation.clearWatch(watchId);
    };
  }, [options]);

  return { position: position, error: error };
}
// CONCATENATED MODULE: ./src/hooks/mouse-position.js


function useMousePosition() {
  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])({ x: 0, y: 0 }),
      state = _useState[0],
      setState = _useState[1];

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    var handler = function handler(_ref) {
      var clientX = _ref.clientX,
          clientY = _ref.clientY;
      return setState({ x: clientX, y: clientY });
    };
    window.addEventListener('mousemove', handler);
    return function () {
      return window.removeEventListener('mousemove', handler);
    };
  }, []);

  return state;
}
// CONCATENATED MODULE: ./src/hooks/media-controls.js


function useMediaControls(element) {
  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(null),
      currentTime = _useState[0],
      setCurrentTime = _useState[1];

  var _useState2 = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(null),
      muted = _useState2[0],
      setMuted = _useState2[1];

  var _useState3 = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(null),
      paused = _useState3[0],
      setPaused = _useState3[1];

  var _useState4 = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(null),
      volume = _useState4[0],
      adjustVolume = _useState4[1];

  var _useState5 = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(null),
      cachedVolume = _useState5[0],
      setCachedVolume = _useState5[1];

  function pause() {
    element.current.pause();
  }

  function play() {
    return element.current.play();
  }

  function setVolume(value) {
    var volume = void 0;

    if (value < 0) {
      volume = 0;
    } else if (value > 1) {
      volume = 1;
    } else {
      volume = value;
    }

    if (volume === 0) {
      setCachedVolume(element.current.volume);
      mute();
    } else {
      unmute();
    }

    element.current.volume = volume;
  }

  function mute() {
    element.current.muted = true;
  }

  function unmute() {
    element.current.muted = false;
    if (cachedVolume) {
      element.current.volume = cachedVolume;
      setCachedVolume(null);
    }
  }

  function seek(value) {
    element.current.currentTime = value;
  }

  function stop() {
    pause();
    seek(0);
  }

  function restart() {
    seek(0);
    return play();
  }

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    var currEl = element.current;
    var isPaused = function isPaused() {
      return currEl.paused || currEl.ended;
    };

    setCurrentTime(currEl.currentTime);
    setPaused(isPaused());
    adjustVolume(currEl.volume);
    setMuted(currEl.muted);

    var playPauseHandler = function playPauseHandler() {
      return setPaused(isPaused());
    };
    currEl.addEventListener('play', playPauseHandler); // fired by play method or autoplay attribute
    currEl.addEventListener('playing', playPauseHandler); // fired by resume after being paused due to lack of data
    currEl.addEventListener('pause', playPauseHandler); // fired by pause method
    currEl.addEventListener('waiting', playPauseHandler); // fired by pause due to lack of data

    var volumeHandler = function volumeHandler() {
      setMuted(currEl.muted);
      adjustVolume(currEl.volume);
    };
    currEl.addEventListener('volumechange', volumeHandler); // fired by a change of volume

    var seekHandler = function seekHandler() {
      return setCurrentTime(currEl.currentTime);
    };
    currEl.addEventListener('seeked', seekHandler); // fired on seek completed
    currEl.addEventListener('timeupdate', seekHandler); // fired on currentTime update

    return function () {
      currEl.removeEventListener('play', playPauseHandler);
      currEl.removeEventListener('playing', playPauseHandler);
      currEl.removeEventListener('pause', playPauseHandler);
      currEl.removeEventListener('waiting', playPauseHandler);

      currEl.removeEventListener('volumechange', volumeHandler);

      currEl.removeEventListener('seeked', seekHandler);
      currEl.removeEventListener('timeupdate', seekHandler);
    };
  }, [element, muted]);

  return {
    currentTime: currentTime,
    mute: mute,
    muted: muted,
    unmute: unmute,
    pause: pause,
    paused: paused,
    play: play,
    restart: restart,
    seek: seek,
    setVolume: setVolume,
    stop: stop,
    volume: volume
  };
}
// CONCATENATED MODULE: ./src/hooks/orientation.js



var orientation_defaultState = {
  angle: 0,
  type: 'landscape-primary'
};

function useOrientation() {
  var currentOrientation = !IS_SERVER && window.screen.orientation ? window.screen.orientation : orientation_defaultState;

  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(currentOrientation),
      state = _useState[0],
      setState = _useState[1];

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    var handler = function handler() {
      return setState(window.screen.orientation);
    };

    window.addEventListener('orientationchange', handler);
    return function () {
      return window.removeEventListener('orientationchange', handler);
    };
  }, []);

  return state;
}
// CONCATENATED MODULE: ./src/hooks/scroll.js



function useScroll() {
  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])({
    top: IS_SERVER ? 0 : window.pageYOffset,
    left: IS_SERVER ? 0 : window.pageXOffset
  }),
      pos = _useState[0],
      setPos = _useState[1];

  function handleScroll() {
    setPos({ top: window.pageYOffset, left: window.pageXOffset });
  }

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    window.addEventListener('scroll', handleScroll, false);

    return function cleanup() {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  return pos;
}
// CONCATENATED MODULE: ./src/hooks/online.js



//@todo: perhaps polling approach for older browsers as an option
//e.g. favicon polling
function useOnline() {
  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(getOnlineStatus()),
      online = _useState[0],
      setOnline = _useState[1];

  function getOnlineStatus() {
    return IS_SERVER || window.navigator && window.navigator.onLine ? true : false;
  }

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    function handleChange() {
      setOnline(getOnlineStatus());
    }

    window.addEventListener('offline', handleChange, false);
    window.addEventListener('online', handleChange, false);

    return function cleanup() {
      window.removeEventListener('online', handleChange);
      window.removeEventListener('offline', handleChange);
    };
  }, []);

  return online;
}
// CONCATENATED MODULE: ./src/hooks/page-visibility.js



/**
 * Function to grab the visibility prop strings
 * from the current browser
 *
 * @returns {object} - object containing both hidden
 *  and visibilityChange properties
 */
var page_visibility_getVisibilityProps = function getVisibilityProps() {
  if (IS_SERVER) {
    return {};
  }

  var hidden = void 0;
  var visibilityChange = void 0;

  if (typeof document.hidden !== 'undefined') {
    // Opera 12.10 and Firefox 18 and later support
    hidden = 'hidden';
    visibilityChange = 'visibilitychange';
  } else if (typeof document.msHidden !== 'undefined') {
    hidden = 'msHidden';
    visibilityChange = 'msvisibilitychange';
  } else if (typeof document.webkitHidden !== 'undefined') {
    hidden = 'webkitHidden';
    visibilityChange = 'webkitvisibilitychange';
  }

  return { hidden: hidden, visibilityChange: visibilityChange };
};

/**
 * Page Visibility API Hook
 * Hooks into page visibility API
 * @returns {boolean} - whether page is currently visible
 */
var page_visibility_usePageVisibility = function usePageVisibility() {
  var _getVisibilityProps = page_visibility_getVisibilityProps(),
      hidden = _getVisibilityProps.hidden,
      visibilityChange = _getVisibilityProps.visibilityChange;

  var _useState = Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useState"])(IS_SERVER || !document[hidden]),
      visible = _useState[0],
      setVisible = _useState[1];

  Object(external_root_React_commonjs2_react_commonjs_react_amd_react_["useEffect"])(function () {
    var handler = function handler() {
      return setVisible(!document[hidden]);
    };

    document.addEventListener(visibilityChange, handler);
    return function () {
      document.removeEventListener(visibilityChange, handler);
    };
  }, [hidden, visibilityChange]);

  return visible;
};
// CONCATENATED MODULE: ./src/index.js










// CONCATENATED MODULE: ./umd.js

/* harmony default export */ var umd = __webpack_exports__["default"] = (src_namespaceObject);

/***/ })
/******/ ])["default"];
});